import { Injectable } from '@nestjs/common';
import PdfPrinter from 'pdfmake';
import { PassThrough } from 'stream';
import type { TDocumentDefinitions } from 'pdfmake/interfaces';
import path from 'path';
import { Prisma } from '@prisma/client';

const fonts = {
  Roboto: {
    normal: path.join(process.cwd(), '/src/pdf/fonts/Roboto-Regular.ttf'), // Or a local font path
    bold: path.join(process.cwd(), '/src/pdf/fonts/Roboto-Bold.ttf'),
    italics: path.join(process.cwd(), '/src/pdf/fonts/Roboto-Italic.ttf'),
    bolditalics: path.join(
      process.cwd(),
      '/src/pdf/fonts/Roboto-BoldItalic.ttf',
    ),
  },
};

function formatDate(dateString?: string | null) {
  if (!dateString) {
    return '';
  }
  const date = new Date(dateString);

  const months: string[] = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December',
  ];

  return `${months[date.getMonth()]} ${date.getFullYear()}`;
}

type ResumeWithUser = Prisma.ResumeGetPayload<{
  include: { user: true };
}>;

type CoverLetterWithUser = Prisma.CoverLetterGetPayload<{
  include: { user: true; jobApplication: true };
}>;

type JobPositionWithBulletPoints = Prisma.JobPositionGetPayload<{
  include: { bulletPoints: true };
}>;

type EducationWithBulletPoints = Prisma.EducationGetPayload<{
  include: { bulletPoints: true };
}>;

@Injectable()
export class PdfService {
  private printer: PdfPrinter;

  constructor() {
    this.printer = new PdfPrinter(fonts);
  }

  createResume(
    resumeData: ResumeWithUser,
    jobPositions: JobPositionWithBulletPoints[],
    education: EducationWithBulletPoints[],
  ) {
    const docDefinition: TDocumentDefinitions = {
      pageMargins: [40, 50, 40, 50],

      footer: () => {
        return {
          text: 'Generated by Career Fingerprint',
          fontSize: 9,
          color: '#999',
          margin: [40, 0, 40, 20],
        };
      },
      content: [
        {
          columns: [
            {
              text: `${resumeData.firstName || resumeData.user?.firstName} ${resumeData.lastName || resumeData.user.lastName}`,
              style: 'name',
            },
            [
              { text: resumeData.email, style: 'contact' },
              { text: resumeData.phoneNumber, style: 'contact' },
              { text: resumeData.location, style: 'contact' },
            ],
          ],
          columnGap: 10,
        },
        '\n',

        // Job title & summary

        {
          text: resumeData.summary,
          style: 'summary',
        },
        '\n',

        // Professional Experience Section
        { text: 'Professional Experience', style: 'sectionHeader' },
        {
          canvas: [
            {
              type: 'line',
              x1: 0,
              y1: 0,
              x2: 515,
              y2: 0,
              lineWidth: 2,
              lineColor: '#ff7a8a',
            },
          ],
          margin: [0, 5, 0, 5],
        },
        ...jobPositions.map((exp) => {
          return [
            {
              columns: [
                {
                  text: `${exp.name} | ${exp.company}`,
                  style: 'jobTitle',
                },
                {
                  text: `${formatDate(exp?.startDate?.toString())} - ${
                    exp.currentPosition
                      ? 'Current'
                      : formatDate(exp?.endDate?.toString())
                  }`,
                  style: 'jobDates',
                },
              ],
            },
            { text: exp.description, style: 'jobDescription' },
            {
              ul: exp.bulletPoints
                .filter((bp) => bp.text !== '')
                .map((bp) => bp.text),
            },
          ];
        }),

        // Education Section
        { text: 'Education', style: 'sectionHeader' },
        {
          canvas: [
            {
              type: 'line',
              x1: 0,
              y1: 0,
              x2: 515,
              y2: 0,
              lineWidth: 2,
              lineColor: '#ff7a8a',
            },
          ],
          margin: [0, 5, 0, 5],
        },
        ...education.map((edu) => [
          {
            columns: [
              { text: edu.degree, style: 'jobTitle' },
              {
                text: `${formatDate(edu?.startDate?.toString())} - ${
                  edu.currentPosition
                    ? 'Current'
                    : formatDate(edu?.endDate?.toString())
                }`,
                style: 'jobDates',
              },
            ],
          },
          { text: edu.institution, style: 'jobDescription' },
          {
            ul: edu.bulletPoints?.map((bp) => bp.text),
          },
        ]),
      ],

      styles: {
        name: { fontSize: 18, bold: true, margin: [0, 0, 0, 5] },
        contact: {
          fontSize: 12,
          color: '#555',
          alignment: 'right',
          marginBottom: 5,
        },
        summary: { fontSize: 12, margin: [0, 2, 0, 5] },
        sectionHeader: {
          fontSize: 14,
          bold: true,
          margin: [0, 10, 0, 0],
          color: '#000000',
        },
        jobTitle: { fontSize: 14, bold: true, margin: [0, 1, 0, 2] },
        jobLocation: { fontSize: 12, italics: true },
        jobDates: { fontSize: 10, color: '#555', alignment: 'right' },
        jobDescription: { fontSize: 10, margin: [0, 2, 0, 8] },
      },

      defaultStyle: {
        font: 'Roboto',
      },
    };

    const pdfDoc = this.printer.createPdfKitDocument(docDefinition);
    const stream = new PassThrough();
    pdfDoc.pipe(stream);
    pdfDoc.end();
    return stream;
  }

  createCoverLetter(coverLetter: CoverLetterWithUser) {
    const docDefinition: TDocumentDefinitions = {
      pageMargins: [40, 50, 40, 50],

      footer: () => {
        return {
          text: 'Generated by Career Fingerprint',
          fontSize: 9,
          color: '#999',
          margin: [40, 0, 40, 20],
        };
      },
      content: [
        {
          text: `${coverLetter.user?.firstName} ${coverLetter.user?.lastName}`,
          style: 'contact',
        },
        { text: coverLetter.user?.email, style: 'contactSmall' },
        '\n',
        {
          text: coverLetter.jobApplication?.company || '',
          style: 'contact',
        },
        {
          text: coverLetter.jobApplication?.location || '',
          style: 'contactSmall',
        },
        '\n',
        { text: `Dear ${coverLetter.to},`, style: 'body' },
        '\n',
        { text: coverLetter.message, style: 'body' },
        '\n',
        {
          text: `Thank you,`,
          style: 'body',
          marginBottom: 2,
        },
        {
          text: coverLetter.user?.firstName,
          style: 'body',
        },
      ],

      styles: {
        contact: {
          fontSize: 12,
          color: '#555',
          marginBottom: 2,
        },
        contactSmall: {
          fontSize: 10,
          color: '#555',
          marginBottom: 1,
        },
      },

      defaultStyle: {
        font: 'Roboto',
      },
    };

    const pdfDoc = this.printer.createPdfKitDocument(docDefinition);
    const stream = new PassThrough();
    pdfDoc.pipe(stream);
    pdfDoc.end();
    return stream;
  }
}
