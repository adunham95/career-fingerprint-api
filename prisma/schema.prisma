// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id               Int              @id @default(autoincrement())
  firstName        String           @default("")
  lastName         String           @default("")
  username         String?          @unique
  password         String
  profileImage     String?          @default("")
  email            String          @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  accountStatus    String           @default("active")
  pitch            String?
  lookingFor       String?
  stripeCustomerID String?
  resume           Resume[]
  positions        JobPosition[]
  achievements     Achievement[]
  projects         Project[]
  education        Education[]
  subscriptions    Subscription[]
  jobApplications  JobApplication[]
  notes            Note[]
  meetings         Meeting[]
  resetTokens      ResetToken[]
  highlights       Highlight[]
  prepAnswers      PrepAnswer[]
  achievementTags  AchievementTag[]

  @@index([email])
}

model ResetToken {
  token     String
  email     String
  expiresAt DateTime
  user      User     @relation(fields: [email], references: [email])

  @@id([token, email])
}

model Plan {
  id                   String         @id @default(uuid())
  key                  String         @unique
  level                Int?           @default(0)
  name                 String
  description          String         @default("")
  featureList          String[]
  priceCents           Int // e.g. 0 for Free, 1000 for $10
  priceCentsYear       Int? // e.g. 0 for Free, 1000 for $10
  interval             String // 'month', 'year'
  features             String[] // Optional
  metadata             Json?
  subscriptions        Subscription[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  monthlyStripePriceID String?
  annualStripePriceID  String?

  @@index([key])
}

model Subscription {
  id               String    @id @default(uuid())
  userID           Int
  planID           String
  status           String    @default("trialing")
  stripeSubId      String? // Stripe subscription ID
  trialEndsAt      DateTime?
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userID], references: [id])
  plan Plan @relation(fields: [planID], references: [id])

  events SubscriptionEvent[]
}

model SubscriptionEvent {
  id             String              @id @default(uuid())
  subscriptionID String
  eventType      String              @default("created") // e.g., 'created', 'updated', 'canceled'
  fromStatus     SubscriptionStatus?
  toStatus       SubscriptionStatus?
  metadata       Json? // Additional event data
  createdAt      DateTime            @default(now())

  subscription Subscription @relation(fields: [subscriptionID], references: [id], onDelete: Cascade)

  @@map("subscription_events")
}

model Resume {
  id          String       @id @default(uuid())
  name        String?
  userID      Int
  user        User         @relation(fields: [userID], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  default     Boolean      @default(false)
  firstName   String       @default("")
  lastName    String       @default("")
  email       String       @default("")
  summary     String       @default("")
  phoneNumber String       @default("")
  location    String       @default("")
  website     String       @default("")
  linkedin    String       @default("")
  github      String       @default("")
  title       String?
  positions   JobOptions[]
}

model JobOptions {
  id                  String        @id @default(uuid())
  resumeID            String?
  resume              Resume?       @relation(fields: [resumeID], references: [id])
  jobID               String?
  job                 JobPosition?  @relation(fields: [jobID], references: [id])
  jobOverwrites       Json?
  visibleAchievements Achievement[] @relation("visibleAchievements")
}

model JobPosition {
  id              String        @id @default(uuid())
  userID          Int
  user            User          @relation(fields: [userID], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  name            String        @default("")
  description     String        @default("")
  startDate       DateTime?
  endDate         DateTime?
  currentPosition Boolean       @default(false)
  company         String        @default("")
  location        String        @default("")
  achievements    Achievement[]
  projects        Project[]
  jobOptions      JobOptions[]
  meetings        Meeting[]
}

model Achievement {
  id             String           @id @default(uuid())
  userID         Int
  user           User             @relation(fields: [userID], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  description    String?
  result         String?
  myContribution String?
  projectID      String?
  startDate      DateTime?
  endDate        DateTime?
  project        Project?         @relation(fields: [projectID], references: [id])
  jobPositionID  String?
  jobPosition    JobPosition?     @relation(fields: [jobPositionID], references: [id])
  educationID    String?
  education      Education?       @relation(fields: [educationID], references: [id])
  resumePosition JobOptions[]     @relation("visibleAchievements")
  highlights     Highlight[]      @relation("highlightAchievements")
  tags           AchievementTag[] @relation("achievementTags")
}

model AchievementTag {
  id           String        @id @default(uuid())
  userID       Int
  user         User          @relation(references: [id], fields: [userID])
  name         String
  color        String
  achievements Achievement[] @relation("achievementTags")

  @@unique([userID, name])
  @@index([name])
}

model Project {
  id            String        @id @default(uuid())
  userID        Int
  user          User          @relation(fields: [userID], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  jobPositionID String
  jobPosition   JobPosition   @relation(fields: [jobPositionID], references: [id])
  description   String
  achievements  Achievement[]
}

model Education {
  id              String        @id @default(uuid())
  userID          Int
  user            User          @relation(fields: [userID], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  institution     String        @default("")
  degree          String        @default("")
  description     String        @default("")
  startDate       DateTime?
  endDate         DateTime?
  currentPosition Boolean       @default(false)
  achievements    Achievement[]
  meetings        Meeting[]
}

// Optional: Store webhook events for debugging
model WebhookEvent {
  id        String   @id @default(uuid())
  stripeId  String   @unique // Stripe event ID
  eventType String // e.g., 'customer.subscription.updated'
  processed Boolean  @default(false)
  data      Json // Raw webhook data
  createdAt DateTime @default(now())

  @@map("webhook_events")
}

model JobApplication {
  id                String       @id @default(uuid())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now()) @updatedAt
  userID            Int
  user              User         @relation(fields: [userID], references: [id])
  title             String
  company           String?
  companyURL        String?
  status            String       @default("applied")
  location          String?
  jobDescriptionURL String?
  jobDescription    String?
  knowAboutCompany  String?
  likeAboutCompany  String?
  goodFit           String?
  grow              String?
  otherQuestions    String?
  meetings          Meeting[]
  prepAnswer        PrepAnswer[]
  migrated          Boolean      @default(false)
}

model Meeting {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userID        Int
  user          User            @relation(fields: [userID], references: [id])
  time          DateTime        @default(now())
  title         String?
  type          String?         @default("Interview")
  notes         Note[]
  location      String?
  link          String?
  agenda        String?
  attendees     String[]
  jobAppID      String?
  jobApp        JobApplication? @relation(fields: [jobAppID], references: [id])
  jobPositionID String?
  jobPosition   JobPosition?    @relation(fields: [jobPositionID], references: [id])
  educationID   String?
  education     Education?      @relation(fields: [educationID], references: [id])
  highlights    Highlight[]
  prepAnswers   PrepAnswer[]
}

model Note {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userID      Int
  user        User       @relation(fields: [userID], references: [id])
  note        String
  meetingID   String?
  meetings    Meeting?   @relation(fields: [meetingID], references: [id])
  highlightID String?
  highlight   Highlight? @relation(fields: [highlightID], references: [id])
}

model Highlight {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userID       Int
  user         User          @relation(fields: [userID], references: [id])
  text         String
  notes        Note[]
  achievements Achievement[] @relation("highlightAchievements")
  meetingID    String?
  meetings     Meeting?      @relation(fields: [meetingID], references: [id])
}

model PrepQuestion {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  question    String
  key         String       @unique
  displayOn   String[]
  order       Int          @default(99)
  prepAnswers PrepAnswer[]
}

model PrepAnswer {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  answer           String
  userID           Int
  user             User            @relation(fields: [userID], references: [id])
  questionID       String
  question         PrepQuestion    @relation(fields: [questionID], references: [id])
  jobApplicationID String?
  JobApplication   JobApplication? @relation(fields: [jobApplicationID], references: [id])
  meetingID        String?
  meeting          Meeting?        @relation(fields: [meetingID], references: [id])

  @@unique([userID, questionID, meetingID])
}

model Feedback {
  id       String  @id @default(uuid())
  userID   Int
  feedback String
  page     String
  device   String
  rating   Int
  contact  Boolean
}
