// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            Int           @id @default(autoincrement())
  firstName     String        @default("Buzz")
  lastName      String        @default("Honeywell")
  username      String?       @unique
  password      String
  profileImage  String?       @default("")
  email         String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accountStatus String        @default("active")
  pitch         String?
  lookingFor    String?
  resume        Resume[]
  positions     JobPosition[]
  achievements  Achievement[]
  projects      Project[]
}

model Resume {
  id          String        @id @default(uuid())
  userID      Int
  user        User          @relation(fields: [userID], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  firstName   String        @default("")
  lastName    String        @default("")
  email       String        @default("")
  summary     String        @default("")
  phoneNumber String        @default("")
  location    String        @default("")
  website     String        @default("")
  linkedin    String        @default("")
  github      String        @default("")
  title       String?
  positions   JobOnResume[]
}

model JobOnResume {
  id                  String        @id @default(uuid())
  resumeID            String?
  resume              Resume?       @relation(fields: [resumeID], references: [id])
  jobID               String?
  job                 JobPosition?  @relation(fields: [jobID], references: [id])
  visibleAchievements Achievement[] @relation("visibleAchievements")
}

model JobPosition {
  id              String        @id @default(uuid())
  userID          Int
  user            User          @relation(fields: [userID], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  name            String
  description     String        @default("")
  startDate       DateTime
  endDate         DateTime?
  currentPosition Boolean       @default(false)
  resumeID        String?
  company         String
  achievements    Achievement[]
  projects        Project[]
  onResumes       JobOnResume[]
}

model Achievement {
  id              String        @id @default(uuid())
  userID          Int
  user            User          @relation(fields: [userID], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  name            String
  description     String
  goal            String?
  result          String?
  metrics         String?
  myContribution  String?
  projectID       String?
  visibleOnResume Boolean?      @default(true)
  project         Project?      @relation(fields: [projectID], references: [id])
  jobPositionID   String?
  jobPosition     JobPosition?  @relation(fields: [jobPositionID], references: [id])
  resumePosition  JobOnResume[] @relation("visibleAchievements")
}

model Project {
  id            String        @id @default(uuid())
  userID        Int
  user          User          @relation(fields: [userID], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  jobPositionID String
  jobPosition   JobPosition   @relation(fields: [jobPositionID], references: [id])
  description   String
  achievements  Achievement[]
}
